.data
string_access_violation: .asciiz "Access Violation"
string_illegal_div_by_0: .asciiz "Illegal Division By Zero"
string_space_after_int:  .asciiz " "
string_invalid_ptr_dref: .asciiz "Invalid Pointer Dereference"
.text
############################
strlen:
	addi $sp,$sp,-8
	sw $s0, 0($sp)
	sw $s1, 4($sp)
	li $s0, 0
loop_strlen:
	lb $s1, 0($a0)
	beqz $s1, exit_strlen
	addi $a0, $a0, 1
	addi $s0, $s0, 1
	j loop_strlen
exit_strlen:
	move $v0, $s0
	lw $s0, 0($sp)
	lw $s1, 4($sp)
	addi $sp,$sp,8
	jr $ra
############################
strcpy:
	lb $s0 0($a0)
	beqz $s0, exit_strcpy
	sb $s0 0($a1)
	addi $a0 $a0 1
	addi $a1 $a1 1
	j strcpy
exit_strcpy:
	move $v0, $a1
	jr $ra
############################
strcon:
	addi $sp,$sp,-8
	sw $ra,0($sp)
	move $s0 ,$a2
	move $s1 ,$a0
	move $s2 ,$a1
	li $a0, 4
	mult $a0, $s0
	mflo $a0
	li $v0,9
	syscall
	move $s0,$v0
	sw $s0,4($sp)
	move $a1, $s0
	move $a0, $s1
	jal strcpy
	move $a1, $v0
	move $a0, $s2
	jal strcpy
	sb $zero, 0($v0)
	lw $s0, 4($sp)
	move $v0, $s0
	lw $ra, 0($sp)
	addi $sp,$sp,8
	jr $ra
############################
strcmp:
	addi $sp,$sp,-12
	sw $t0, 0($sp)
	sw $t1, 4($sp)
	sw $t2, 8($sp)
	move $t2 ,$ra
	move $s0,$a0
	move $s1,$a1
	jal strlen
	move $t0 ,$v0
	move $a0 ,$s1
	move $a0,$s1
	jal strlen
	move $t1 ,$v0
	bne $t0,$t1,end_strcmp_false
strcmp_loop:
	lb $t0, 0($s0)
	lb $t1, 0($s1)
	beq $t0,$zero,end_strcmp_true
	bne $t0,$t1,end_strcmp_false
	addi $s0 $s0 1
	addi $s1 $s1 1
	j strcmp_loop
end_strcmp_true:
	li $v0, 0
	j strcmp_exit
end_strcmp_false:
	li $v0, 1
strcmp_exit:
	move $ra, $t2
	lw $t0, 0($sp)
	lw $t1, 4($sp)
	lw $t2, 8($sp)
	addi $sp,$sp,12
	jr $ra
############################
Label_0_Func_IsPrime:
	addi $sp,$sp,-8
	sw $ra,0($sp)
	addi $sp $sp -4
	sw  $fp 0($sp)
	move $fp,$sp
	addi $sp,$sp,-12
	lw $t0, 0($a0)
	sw $t0, -4($fp)
	li $t0,2
	sw $t0, -8($fp)
	li $t0,2
	sw $t0, -12($fp)
	j Label_2_While_Block_Cond
Label_1_While_Start_block:
	lw $t1, -12($fp)
	move $t0,$t1
	li $t0,2
	sw $t0, -12($fp)
	j Label_4_While_Block_Cond
Label_3_While_Start_block:
	lw $t1, -8($fp)
	move $t0,$t1
	lw $t2, -12($fp)
	move $t1,$t2
	li $t2,32767
	li $t3,-32767
	mult $t0,$t1
	mflo $t1
	blt $t2,$t1,Label_11_overflow
	bgt $t3,$t1,Label_11_overflow
	bge $t2,$t1,Label_13_no_overflow
Label_11_overflow:
	li $t0,32767
	j Label_10_end
Label_12_overflow_min:
	li $t0,-32767
	j Label_10_end
Label_13_no_overflow:
	move $t0,$t1
	j Label_10_end
Label_10_end:
	lw $t2, -4($fp)
	move $t1,$t2
	beq $t0,$t1,Label_14_equal
	bne $t0,$t1,Label_15_not_equal
Label_14_equal:
	li $t0,1
	j Label_16_end
Label_15_not_equal:
	li $t0,0
	j Label_16_end
Label_16_end:
	beq $t0,$zero,Label_5_End_if_block
	li $t0,0
	move $sp, $fp
	lw $fp, 0($fp)
	addi $sp,$sp,4
	lw $ra, 0($sp)
	addi $sp,$sp,4
	sw $t0, 0($sp)
	jr $ra
Label_5_End_if_block:
	lw $t1, -12($fp)
	move $t0,$t1
	lw $t1, -12($fp)
	move $t0,$t1
	li $t1,1
	li $t3,32767
	li $t4,-32767
	add $t2,$t0,$t1
	blt $t3,$t2,Label_18_overflow
	bgt $t4,$t2,Label_18_overflow
	bge $t3,$t2,Label_20_no_overflow
Label_18_overflow:
	li $t0,32767
	j Label_17_end
Label_19_overflow_min:
	li $t0,-32767
	j Label_17_end
Label_20_no_overflow:
	move $t0,$t2
	j Label_17_end
Label_17_end:
	sw $t0, -12($fp)
Label_4_While_Block_Cond:
	lw $t1, -12($fp)
	move $t0,$t1
	lw $t2, -4($fp)
	move $t1,$t2
	blt $t0,$t1,Label_22_AssignOne
	bge $t0,$t1,Label_23_AssignZero
Label_22_AssignOne:
	li $t0,1
	j Label_21_end
Label_23_AssignZero:
	li $t0,0
	j Label_21_end
Label_21_end:
	bne $t0,$zero,Label_3_While_Start_block
	lw $t1, -8($fp)
	move $t0,$t1
	lw $t1, -8($fp)
	move $t0,$t1
	li $t1,1
	li $t3,32767
	li $t4,-32767
	add $t2,$t0,$t1
	blt $t3,$t2,Label_25_overflow
	bgt $t4,$t2,Label_25_overflow
	bge $t3,$t2,Label_27_no_overflow
Label_25_overflow:
	li $t0,32767
	j Label_24_end
Label_26_overflow_min:
	li $t0,-32767
	j Label_24_end
Label_27_no_overflow:
	move $t0,$t2
	j Label_24_end
Label_24_end:
	sw $t0, -8($fp)
Label_2_While_Block_Cond:
	lw $t1, -8($fp)
	move $t0,$t1
	lw $t2, -4($fp)
	move $t1,$t2
	blt $t0,$t1,Label_29_AssignOne
	bge $t0,$t1,Label_30_AssignZero
Label_29_AssignOne:
	li $t0,1
	j Label_28_end
Label_30_AssignZero:
	li $t0,0
	j Label_28_end
Label_28_end:
	bne $t0,$zero,Label_1_While_Start_block
	li $t0,1
	move $sp, $fp
	lw $fp, 0($fp)
	addi $sp,$sp,4
	lw $ra, 0($sp)
	addi $sp,$sp,4
	sw $t0, 0($sp)
	jr $ra
	move $sp, $fp
	lw $fp, 0($fp)
	addi $sp,$sp,4
	lw $ra, 0($sp)
	addi $sp,$sp,4
	sw $zero, 0($sp)
	jr $ra
##### End of IsPrime function
Label_6_Func_PrintPrimes:
	addi $sp,$sp,-8
	sw $ra,0($sp)
	addi $sp $sp -4
	sw  $fp 0($sp)
	move $fp,$sp
	addi $sp,$sp,-12
	lw $t0, 0($a0)
	sw $t0, -4($fp)
	lw $t0, 4($a0)
	sw $t0, -8($fp)
	lw $t1, -4($fp)
	move $t0,$t1
	sw $t0, -12($fp)
	j Label_8_While_Block_Cond
Label_7_While_Start_block:
	addi $sp,$sp,-32
	sw $t0, 0($sp)
	sw $t1, 4($sp)
	sw $t2, 8($sp)
	sw $t3, 12($sp)
	sw $t4, 16($sp)
	sw $t5, 20($sp)
	sw $t6, 24($sp)
	sw $t7, 28($sp)
	li $a0 ,4
	li $v0,9
	syscall
	move $a0,$v0
	addi $sp,$sp,-4
	sw $a0, 0($sp)
	lw $t1, -12($fp)
	move $t0,$t1
	lw $a0, 0($sp)
	addi $sp,$sp,4
	sw $t0, 0($a0)
	jal Label_0_Func_IsPrime
	lw $t0, 4($sp)
	lw $t1, 8($sp)
	lw $t2, 12($sp)
	lw $t3, 16($sp)
	lw $t4, 20($sp)
	lw $t5, 24($sp)
	lw $t6, 28($sp)
	lw $t7, 32($sp)
	lw $t0, 0($sp)
	addi $sp,$sp,36
	beq $t0,$zero,Label_9_End_if_block
	lw $t1, -12($fp)
	move $t0,$t1
	move $a0,$t0
	li $v0,1
	syscall
	li $v0, 4
	la $a0, string_space_after_int
	syscall
Label_9_End_if_block:
	lw $t1, -12($fp)
	move $t0,$t1
	lw $t1, -12($fp)
	move $t0,$t1
	li $t1,1
	li $t3,32767
	li $t4,-32767
	add $t2,$t0,$t1
	blt $t3,$t2,Label_32_overflow
	bgt $t4,$t2,Label_32_overflow
	bge $t3,$t2,Label_34_no_overflow
Label_32_overflow:
	li $t0,32767
	j Label_31_end
Label_33_overflow_min:
	li $t0,-32767
	j Label_31_end
Label_34_no_overflow:
	move $t0,$t2
	j Label_31_end
Label_31_end:
	sw $t0, -12($fp)
Label_8_While_Block_Cond:
	lw $t1, -12($fp)
	move $t0,$t1
	lw $t2, -8($fp)
	move $t1,$t2
	li $t2,1
	li $t4,32767
	li $t5,-32767
	add $t3,$t1,$t2
	blt $t4,$t3,Label_36_overflow
	bgt $t5,$t3,Label_36_overflow
	bge $t4,$t3,Label_38_no_overflow
Label_36_overflow:
	li $t1,32767
	j Label_35_end
Label_37_overflow_min:
	li $t1,-32767
	j Label_35_end
Label_38_no_overflow:
	move $t1,$t3
	j Label_35_end
Label_35_end:
	blt $t0,$t1,Label_40_AssignOne
	bge $t0,$t1,Label_41_AssignZero
Label_40_AssignOne:
	li $t0,1
	j Label_39_end
Label_41_AssignZero:
	li $t0,0
	j Label_39_end
Label_39_end:
	bne $t0,$zero,Label_7_While_Start_block
	move $sp, $fp
	lw $fp, 0($fp)
	addi $sp,$sp,4
	lw $ra, 0($sp)
	addi $sp,$sp,4
	sw $zero, 0($sp)
	jr $ra
##### End of PrintPrimes function
main:
	addi $sp $sp -4
	sw  $fp 0($sp)
	move $fp,$sp
	addi $sp,$sp,0
	addi $sp,$sp,-32
	sw $t0, 0($sp)
	sw $t1, 4($sp)
	sw $t2, 8($sp)
	sw $t3, 12($sp)
	sw $t4, 16($sp)
	sw $t5, 20($sp)
	sw $t6, 24($sp)
	sw $t7, 28($sp)
	li $a0 ,8
	li $v0,9
	syscall
	move $a0,$v0
	addi $sp,$sp,-4
	sw $a0, 0($sp)
	li $t0,2
	lw $a0, 0($sp)
	addi $sp,$sp,4
	sw $t0, 0($a0)
	addi $sp,$sp,-4
	sw $a0, 0($sp)
	li $t0,100
	lw $a0, 0($sp)
	addi $sp,$sp,4
	sw $t0, 4($a0)
	jal Label_6_Func_PrintPrimes
	lw $t0, 4($sp)
	lw $t1, 8($sp)
	lw $t2, 12($sp)
	lw $t3, 16($sp)
	lw $t4, 20($sp)
	lw $t5, 24($sp)
	lw $t6, 28($sp)
	lw $t7, 32($sp)
	lw $t0, 0($sp)
	addi $sp,$sp,36
	j END_OF_PROGRAM
##### End of main function
END_OF_PROGRAM:
	li $v0,10
	syscall
