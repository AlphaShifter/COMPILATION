/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;

parser code 
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");		
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal EQ;
terminal LT;
terminal GT;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal WHILE;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;
terminal RETURN;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal AST_EXP_LIST expList;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;

/************************/
/* START WITH: stmtList */
/************************/
start with stmtList;

/********************/
/* DERIVATION RULES */
/********************/


varDec 	::= 	ID:name1 ID:name2 ASSIGN exp:e SEMICOLON			{: RESULT = new AST_VARDEC(name1,name2,e);:}
			|	ID:name1 ID:name2  SEMICOLON					{: RESULT = new AST_VARDEC(name1,name2,null);:};
arrayDec 	::= 	ARRAY ID:name1 EQ ID:name2 LBRACK RBRACK 	{: RESULT = new AST_ARRAYDEC(name1,name2);:};


stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l);    :}
					| stmt:s				{: RESULT = new AST_STMT_LIST(s,null); :}
					;

expList     ::=     exp: e                  {: RESULT = new AST_EXP_LIST(e, null); :}
                    | exp: e COMMA expList:l  {: RESULT = new AST_EXP_LIST(e, l); :}
                    ;

var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name);       :}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName); :} 
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :}
					;
					
stmt		::=		var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v,e); :}
                    | RETURN SEMICOLON                                          {:RESULT = new AST_STMT_RETURN(null); :}
                    | RETURN exp:l SEMICOLON                                    {:RESULT = new AST_STMT_RETURN(l); :}
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(   cond,body); :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body); :}
					;

exp			::=		INT:i								{: RESULT = new AST_EXP_INT(i);          :}
                    | MINUS INT:i						{: RESULT = new AST_EXP_INT(-i);         :}
                    | NIL                               {: RESULT = new AST_EXP_NIL();           :}
                    | STRING:str                        {: RESULT = new AST_EXP_STRING(str);     :}
                    | NEW ID:id                         {: RESULT = new AST_EXP_ID(id, null);    :}
                    | NEW ID LBRACK exp:e RBRACK        {: RESULT = new AST_EXP_ID(id, e);       :}
					| var:v								{: RESULT = new AST_EXP_VAR(v);          :}
					| exp:e1 PLUS  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 0);:}
					| exp:e1 MINUS exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 1);:}
					| exp:e1 TIMES exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 2);:}
					| exp:e1 DIVIDE exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 3);:}
					| exp:e1 LT exp:e2				    {: RESULT = new AST_EXP_BINOP(e1, e2, 4);:}
					| exp:e1 GT exp:e2				    {: RESULT = new AST_EXP_BINOP(e1, e2, 5);:}
					| exp:e1 EQ exp:e2				    {: RESULT = new AST_EXP_BINOP(e1, e2, 6);:}
                    | LPAREN exp:e1 RPAREN				{: RESULT = new AST_EXP_SINGLE(e1);:}
                    | ID:name LPAREN RPAREN				{: RESULT = new AST_EXP_METHOD(null, name, null);:}
                    | var: v DOT ID:name LPAREN RPAREN				{: RESULT = new AST_EXP_METHOD(var, name, null);:}
                    | ID:name LPAREN expList:args RPAREN				{: RESULT = new AST_EXP_METHOD(null, name, args);:}
                    | var: v DOT ID:name LPAREN expList:args RPAREN				{: RESULT = new AST_EXP_METHOD(v, name, args);:}
					;
