/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;

parser code 
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");		
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal EQ;
terminal LT;
terminal GT;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal WHILE;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;
terminal RETURN;
terminal ARRAY;
terminal CLASS;
terminal EXTENDS;
terminal NIL;
terminal COMMA;
terminal NEW;
terminal COMMENT;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal Integer NUMBER;
terminal String ID;
terminal String STRING;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal AST_EXP_LIST expList;
non terminal AST_DEC_VAR varDec;
non terminal AST_DEC_FUNC funcDec;
non terminal AST_DEC_CLASS classDec;
non terminal AST_DEC_ARRAY arrayDec;
non terminal AST_DEC dec;
non terminal AST_ID_LIST IDList;
non terminal AST_CFIELD_LIST cFieldList;
non terminal AST_CFIELD cField;
non terminal AST_DEC_LIST decList;
non terminal AST_PROGRAM Program;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;
precedence nonassoc EQ;
precedence nonassoc GT;
precedence nonassoc LT;

/************************/
/* START WITH: stmtList */
/************************/
start with Program;

/********************/
/* DERIVATION RULES */
/********************/


varDec 	::= 	ID:name1 ID:name2 ASSIGN exp:e SEMICOLON			{: RESULT = new AST_DEC_VAR(name1,name2,e);:}
			|	ID:name1 ID:name2  SEMICOLON					{: RESULT = new AST_DEC_VAR(name1,name2,null);:}
			;
funcDec ::=     ID:name1 ID:name2 LPAREN RPAREN LBRACE stmtList:l RBRACE {: RESULT = new AST_DEC_FUNC(name1,name2,null,l); :}
            |   ID:name1 ID:name2 LPAREN IDList:idl RPAREN LBRACE stmtList:l RBRACE {: RESULT = new AST_DEC_FUNC(name1,name2,idl,l); :}
            ;
classDec ::=     CLASS ID:name1 LBRACE cFieldList:l RBRACE      {:RESULT = new AST_DEC_CLASS(name1,null,l);:}
            |   CLASS ID:name1 EXTENDS ID:name2 LBRACE cFieldList:l RBRACE      {:RESULT = new AST_DEC_CLASS(name1,name2,l);:}
            ;

arrayDec 	::= 	ARRAY ID:name1 EQ ID:name2 LBRACK RBRACK 	{: RESULT = new AST_DEC_ARRAY(name1,name2);:}
            ;

Program     ::=  decList:l                                      {:RESULT = new AST_PROGRAM(l);:}
            ;

dec ::=       varDec:v {:RESULT = new AST_DEC_SINGLE(v);:}
               | funcDec:v {:RESULT = new AST_DEC_SINGLE(v);:}
               |classDec:v {:RESULT = new AST_DEC_SINGLE(v);:}
               |arrayDec:v {:RESULT = new AST_DEC_SINGLE(v);:}
               |COMMENT
                ;

decList     ::=     dec:d decList:l {:RESULT = new AST_DEC_LIST(d,l); :}
                    | dec:d         {:RESULT = new AST_DEC_LIST(d,null); :}
                    ;



stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l);    :}
					| stmt:s				{: RESULT = new AST_STMT_LIST(s,null); :}
					;

expList     ::=     exp: e COMMA expList:l  {: RESULT = new AST_EXP_LIST(e, l); :}
                    | exp: e    {: RESULT = new AST_EXP_LIST(e, null); :}
                    ;

IDList      ::=     ID: name1  ID: name2                {: RESULT = new AST_ID_LIST(name1,name2, null); :}
                    | ID: name1 ID: name2 COMMA IDList:l  {: RESULT = new AST_ID_LIST(name1,name2, l); :}
                     ;
cFieldList ::= 		cField:s	cFieldList:l		{: RESULT = new AST_CFIELD_LIST(s,l);    :}
               					| cField:s				{: RESULT = new AST_CFIELD_LIST(s,null); :}
               					;


var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name);       :}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName); :} 
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :}
					;
					
stmt		::=		var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v,e); :}
                    | RETURN SEMICOLON                                          {:RESULT = new AST_STMT_RETURN(null); :}
                    | RETURN exp:l SEMICOLON                                    {:RESULT = new AST_STMT_RETURN(l); :}
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(   cond,body); :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body); :}
                    | ID:name LPAREN RPAREN SEMICOLON				            {: RESULT = new AST_STMT_METHOD(null, name, null);:}
                    | var: v DOT ID:name LPAREN RPAREN SEMICOLON	            {: RESULT = new AST_STMT_METHOD(v, name, null);:}
                    | ID:name LPAREN expList:args RPAREN SEMICOLON		        {: RESULT = new AST_STMT_METHOD(null, name, args);:}
                    | var: v DOT ID:name LPAREN expList:args RPAREN	SEMICOLON	{: RESULT = new AST_STMT_METHOD(v, name, args);:}
                    | varDec: dec                                               {: RESULT = new AST_DEC_SINGLE(dec);:}
                    | COMMENT
					;

exp			::=		INT:i								{: RESULT = new AST_EXP_INT(i);          :}
                    | MINUS INT:i						{: RESULT = new AST_EXP_INT(-i);         :}
                    | NUMBER: i                         {: RESULT = new AST_EXP_INT(i);         :}
                    | NIL                               {: RESULT = new AST_EXP_NIL();           :}
                    | STRING:str                        {: RESULT = new AST_EXP_STRING(str);     :}
                    | NEW ID:id                         {: RESULT = new AST_EXP_ID(id, null);    :}
                    | NEW ID:id LBRACK exp:e RBRACK        {: RESULT = new AST_EXP_ID(id, e);    :}
					| var:v								{: RESULT = new AST_EXP_VAR(v);          :}
					| exp:e1 PLUS  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 0);:}
					| exp:e1 MINUS exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 1);:}
					| exp:e1 TIMES exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 2);:}
					| exp:e1 DIVIDE exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 3);:}
					| exp:e1 LT exp:e2				    {: RESULT = new AST_EXP_BINOP(e1, e2, 4);:}
					| exp:e1 GT exp:e2				    {: RESULT = new AST_EXP_BINOP(e1, e2, 5);:}
					| exp:e1 EQ exp:e2				    {: RESULT = new AST_EXP_BINOP(e1, e2, 6);:}
                    | LPAREN exp:e1 RPAREN				{: RESULT = new AST_EXP_SINGLE(e1);:}
                    | ID:name LPAREN RPAREN				{: RESULT = new AST_EXP_METHOD(null, name, null);:}
                    | var: v DOT ID:name LPAREN RPAREN				{: RESULT = new AST_EXP_METHOD(v, name, null);:}
                    | ID:name LPAREN expList:args RPAREN				{: RESULT = new AST_EXP_METHOD(null, name, args);:}
                    | var: v DOT ID:name LPAREN expList:args RPAREN				{: RESULT = new AST_EXP_METHOD(v, name, args);:}
					;

cField ::= varDec:v {:RESULT= new AST_CFIELD(v);:}
        | funcDec:v {:RESULT= new AST_CFIELD(v);:};